---
- name: Set ansible user for role
  set_fact:
    ansible_ssh_user: "{{ windows_domain_controller_info.domain_admin_user }}"
    ansible_ssh_pass: "{{ windows_domain_controller_info.domain_admin_password }}"
    ansible_winrm_transport: ntlm
  no_log: true

# list host with gathered ip address facts
- name: Debug variables
  debug:
    msg: "{{ hostvars[item].ansible_default_ipv4.address }}"
  when: hostvars[item].ansible_default_ipv4 is defined
  with_items: "{{ groups['splunk'] }}"

- name: Add PSGallery as Trusted Powershell Repo
  win_shell: |
    if ($false -eq (get-packagesource | Where-Object { $_.Name -eq "PSGallery" } | % { $_.istrusted })){
      Set-PackageSource -Name PSGallery -Trusted -Force
    }

# Add powershell modules
- name: Check for xDnsServer Powershell module
  win_shell: |
    Install-Module -Name xDnsServer

# setup forwarding
- name: Configure DNS Forwarders
  win_dsc:
    resource_name: xDnsServerSetting
    Name: DNSServerProperties
    NoRecursion: false
    Forwarders: "{{ windows_domain_info['dns_forward_lookup'] }}"

# add a records
- name: Configure Splunk DNS
  win_dsc:
    resource_name: xDnsRecord
    Name: "{{ item.split('.')[0] | lower }}"
    Zone: "{{ windows_domain_controller_info['dns_domain_name'] }}"
    Target: "{{ hostvars[item].ansible_default_ipv4.address }}"
    Type: ARecord
  when: hostvars[item].ansible_default_ipv4 is defined
  with_items: "{{ groups['splunk'] }}"


# enable dns debug eos_logging
- name: Enable DNS debug logging
  win_shell: |
    New-Item -ErrorAction SilentlyContinue -Type Directory C:\DNS
    Set-DnsServerDiagnostics `
      -LogFilePath C:\DNS\dns.log `
      -UdpPackets $true `
      -TcpPackets $true `
      -Queries $true `
      -SendPackets $true `
      -ReceivePackets $true `
      -Answers $true `
      -UnmatchedResponse $true `
      -Updates $true `
      -Notifications $true `
      -QuestionTransactions $true `
      -EnableLoggingForLocalLookupEvent $true `
      -EnableLoggingForPluginDLLEvent $true `
      -EnableLoggingForRecursiveLookupEvent $true `
      -EnableLoggingForRemoteServerEvent $true `
      -EnableLoggingForServerStartStopEvent $true `
      -EnableLoggingForTombstoneEvent $true `
      -EnableLoggingForZoneDataWriteEvent $true `
      -EnableLoggingForZoneLoadingEvent $true

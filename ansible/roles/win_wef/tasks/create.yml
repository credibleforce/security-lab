---
# - name: Download NSA Subscription Templates
#   win_shell: |
#     #download zip with all NSA samples
#     if (-not ([Net.ServicePointManager]::SecurityProtocol).tostring().contains("Tls12")){ #there is no need to set Tls12 in 1809 releases, therefore for insider it does not apply
#         [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
#     }
#     Invoke-WebRequest -UseBasicParsing -Uri https://github.com/nsacyber/Event-Forwarding-Guidance/archive/master.zip -OutFile $env:USERPROFILE\Downloads\NSASamples.zip

#     #unzip
#     Expand-Archive -Path $env:USERPROFILE\Downloads\NSASamples.zip -DestinationPath $env:USERPROFILE\Downloads

# - name: Configure Windows Event Collector
#   win_shell: |
#     # Enable WEF quick config
#     WECUtil qc /q

#     #Import XML files for rules, that will be configured on collector
#     $XMLFiles=Get-ChildItem "$env:USERPROFILE\downloads\Event-Forwarding-Guidance-master\Subscriptions\NT6"

#     #modify target domain name in AccountLogons.xml
#     $Path="$env:USERPROFILE\Downloads\Event-Forwarding-Guidance-master\Subscriptions\NT6\AccountLogons.xml"
#     $AccountLogonsXML=Get-Content -Path $Path
#     $AccountLogonsXML[45]=$AccountLogonsXML[45].replace("TEST","{{ windows_domain_controller_info['domain_netbios_name'] }}")
#     $AccountLogonsXML[59]=$AccountLogonsXML[59].replace("TEST","{{ windows_domain_controller_info['domain_netbios_name'] }}")
#     $AccountLogonsXML | Out-File -FilePath $Path

#     #process Templates, add AD group to each template and create subscription
#     foreach ($XMLFile in $XMLFiles){
#       # Subscribe all domain controllers and computers
#       $AllowedSourceDomainComputers="O:NSG:NSD:(A;;GA;;;DC)(A;;GA;;;NS)(A;;GA;;;DD)"
#       [xml]$XML=get-content $XMLFile.FullName
#       $xml=$XML
#       $xml.subscription.AllowedSourceDomainComputers=$AllowedSourceDomainComputers
#       $xml.Save("$env:TEMP\temp.xml")
#       wecutil cs "$env:TEMP\temp.xml"
      
#     }
#   register: script_result

- name: Download Palantir Subscription Templates
  win_shell: |
    #download zip with all Palantir samples
    if (-not ([Net.ServicePointManager]::SecurityProtocol).tostring().contains("Tls12")){ #there is no need to set Tls12 in 1809 releases, therefore for insider it does not apply
        [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
    }
    Invoke-WebRequest -UseBasicParsing -Uri https://github.com/palantir/windows-event-forwarding/archive/master.zip -OutFile $env:USERPROFILE\Downloads\PalantirSamples.zip

    #unzip
    Expand-Archive -Path $env:USERPROFILE\Downloads\PalantirSamples.zip -DestinationPath $env:USERPROFILE\Downloads

# microsoft based policies
- name: Copy GPO policy to domain controller
  win_copy:
      src: ../files/Subscriptions
      dest: c:\

- name: Custom Event Channel - Download SDK and Install SDK
  win_shell: |
    $OutputFolder="C:\WEC"

    #Create output folder if does not exist
    if(!([System.IO.File]::Exists(Test-Path $OutputFolder))) { 
        New-Item $OutputFolder -ItemType Directory -ErrorAction SilentlyContinue
    }

    $ProgressPreference='SilentlyContinue' #for faster download
    #Download Windows 10 RS5 SDK
    Invoke-WebRequest -UseBasicParsing -Uri https://go.microsoft.com/fwlink/p/?LinkID=2033908 -OutFile "$OutputFolder\SDKRS5_Setup.exe"
    #Install SDK RS5
    Start-Process -Wait -FilePath "$OutputFolder\SDKRS5_Setup.exe" -ArgumentList "/features OptionId.DesktopCPPx64 /quiet"
    
# - name: Custom Event Channel - Create the Manifest
#   win_shell: |
#     $OutputFolder="C:\WEC"
#     $CustomEventChannelsFileName="CustomEventChannels"
    
#     #some neccessaries
#     $ManifestFileName = '{0}.man' -f $CustomEventChannelsFileName
#     $ResourceFileName = 'C:\Windows\system32\{0}.dll' -f $CustomEventChannelsFileName
#     $message = '$(string.Custom Forwarded Events.event.100.message)' 
    
#     #Events definition - based on palantir
#     $EventsArray = @(
#         @{
#             EventProviderName = 'WEC'
#             EventGuid = New-Guid
#             EventSymbol = 'WEC_EVENTS'
#             EventResourceFileName = $ResourceFileName
#             ImportChannelID='C1'
#             Channels = @(
#                 @{
#                     ChannelName = 'WEC-Powershell'
#                     ChannelchID = 'WEC-Powershell'
#                     ChannelSymbol = 'WEC_Powershell'
#                 },
#                 @{
#                     ChannelName = 'WEC-WMI'
#                     ChannelchID = 'WEC-WMI'
#                     ChannelSymbol = 'WEC_WMI'
#                 },
#                 @{
#                     ChannelName = 'WEC-Authentication'
#                     ChannelchID = 'WEC-Authentication'
#                     ChannelSymbol = 'WEC_Authentication'
#                 },
#                 @{
#                     ChannelName = 'WEC-Services'
#                     ChannelchID = 'WEC-Services'
#                     ChannelSymbol = 'WEC_Services'
#                 },
#                 @{
#                     ChannelName = 'WEC-Process-Execution'
#                     ChannelchID = 'WEC-Process-Execution'
#                     ChannelSymbol = 'WEC_Process_Execution'
#                 },
#                 @{
#                     ChannelName = 'WEC-Code-Integrity'
#                     ChannelchID = 'WEC-Code-Integrity'
#                     ChannelSymbol = 'WEC_Code_Integrity'
#                 }
#             )
#         },
#         @{
#             EventProviderName = 'WEC2'
#             EventGuid = New-Guid
#             EventSymbol = 'WEC2_EVENTS'
#             EventResourceFileName = $ResourceFileName
#             ImportChannelID='C2'
#             Channels = @(
#                 @{
#                     ChannelName = 'WEC2-Registry'
#                     ChannelchID = 'WEC2-Registry'
#                     ChannelSymbol = 'WEC2_Registry'
#                 },
#                 @{
#                     ChannelName = 'WEC2-Applocker'
#                     ChannelchID = 'WEC2-Applocker'
#                     ChannelSymbol = 'WEC2_Applocker'
#                 },
#                 @{
#                     ChannelName = 'WEC2-Task-Scheduler'
#                     ChannelchID = 'WEC2-Task-Scheduler'
#                     ChannelSymbol = 'WEC2_Task_Scheduler'
#                 },
#                 @{
#                     ChannelName = 'WEC2-Application-Crashes'
#                     ChannelchID = 'WEC2-Application-Crashes'
#                     ChannelSymbol = 'WEC2_Application_Crashes'
#                 },
#                 @{
#                     ChannelName = 'WEC2-Windows-Defender'
#                     ChannelchID = 'WEC2-Windows-Defender'
#                     ChannelSymbol = 'WEC2_Windows_Defender'
#                 },
#                 @{
#                     ChannelName = 'WEC2-Group-Policy-Errors'
#                     ChannelchID = 'WEC2-Group-Policy-Errors'
#                     ChannelSymbol = 'WEC_Group_Policy_Errors'
#                 },
#                 @{
#                     ChannelName = 'WEC2-Object-Manipulation'
#                     ChannelchID = 'WEC2-Object-Manipulation'
#                     ChannelSymbol = 'WEC2_Object_Manipulation'
#                 }
#             )
#         },
#         @{
#             EventProviderName = 'WEC3'
#             EventGuid = New-Guid
#             EventSymbol = 'WEC3_EVENTS'
#             EventResourceFileName = $ResourceFileName
#             ImportChannelID='C3'
#             Channels = @(
#                 @{
#                     ChannelName = 'WEC3-Drivers'
#                     ChannelchID = 'WEC3-Drivers'
#                     ChannelSymbol = 'WEC3_Drivers'
#                 },
#                 @{
#                     ChannelName = 'WEC3-Account-Management'
#                     ChannelchID = 'WEC3-Account-Management'
#                     ChannelSymbol = 'WEC3_Account_Management'
#                 },
#                 @{
#                     ChannelName = 'WEC3-Windows-Diagnostics'
#                     ChannelchID = 'WEC3-Windows-Diagnostics'
#                     ChannelSymbol = 'WEC3_Windows_Diagnostics'
#                 },
#                 @{
#                     ChannelName = 'WEC3-Smart-Card'
#                     ChannelchID = 'WEC3-Smart-Card'
#                     ChannelSymbol = 'WEC3_Smart_Card'
#                 },
#                 @{
#                     ChannelName = 'WEC3-Print'
#                     ChannelchID = 'WEC3-Print'
#                     ChannelSymbol = 'WEC3_Print'
#                 },
#                 @{
#                     ChannelName = 'WEC3-Firewall'
#                     ChannelchID = 'WEC3-Firewall'
#                     ChannelSymbol = 'WEC3_Firewall'
#                 },
#                 @{
#                     ChannelName = 'WEC3-External-Devices'
#                     ChannelchID = 'WEC3-External-Devices'
#                     ChannelSymbol = 'WEC3_External_Devices'
#                 }
#             )
#         },
#         @{
#             EventProviderName = 'WEC4'
#             EventGuid = New-Guid
#             EventSymbol = 'WEC4_EVENTS'
#             EventResourceFileName = $ResourceFileName
#             ImportChannelID='C4'
#             Channels = @(
#                 @{
#                     ChannelName = 'WEC4-Wireless'
#                     ChannelchID = 'WEC4-Wireless'
#                     ChannelSymbol = 'WEC4_Wireless'
#                 },
#                 @{
#                     ChannelName = 'WEC4-Shares'
#                     ChannelchID = 'WEC4-Shares'
#                     ChannelSymbol = 'WEC4_Shares'
#                 },
#                 @{
#                     ChannelName = 'WEC4-Bits-Client'
#                     ChannelchID = 'WEC4-Bits-Client'
#                     ChannelSymbol = 'WEC4_Bits_Client'
#                 },
#                 @{
#                     ChannelName = 'WEC4-Windows-Updates'
#                     ChannelchID = 'WEC4-Windows-Updates'
#                     ChannelSymbol = 'WEC4_Windows_Updates'
#                 },
#                 @{
#                     ChannelName = 'WEC4-Hotpatching-Errors'
#                     ChannelchID = 'WEC4-Hotpatching-Errors'
#                     ChannelSymbol = 'WEC4_Hotpatching_Errors'
#                 },
#                 @{
#                     ChannelName = 'WEC4-DNS'
#                     ChannelchID = 'WEC4-DNS'
#                     ChannelSymbol = 'WEC4_DNS'
#                 },
#                 @{
#                     ChannelName = 'WEC4-System-Time-Change'
#                     ChannelchID = 'WEC4-System-Time-Change'
#                     ChannelSymbol = 'WEC4_System_Time_Change'
#                 }
#             )
#         },
#         @{
#             EventProviderName = 'WEC5'
#             EventGuid = New-Guid
#             EventSymbol = 'WEC5_EVENTS'
#             EventResourceFileName = $ResourceFileName
#             ImportChannelID='C5'
#             Channels = @(
#                 @{
#                     ChannelName = 'WEC5-Operating-System'
#                     ChannelchID = 'WEC5-Operating-System'
#                     ChannelSymbol = 'WEC5_Operating_System'
#                 },
#                 @{
#                     ChannelName = 'WEC5-Certificate-Authority'
#                     ChannelchID = 'WEC5-Certificate-Authority'
#                     ChannelSymbol = 'WEC5_Certificate_Authority'
#                 },
#                 @{
#                     ChannelName = 'WEC5-Crypto-API'
#                     ChannelchID = 'WEC5-Crypto-API'
#                     ChannelSymbol = 'WEC5_Crypto_API'
#                 },
#                 @{
#                     ChannelName = 'WEC5-MSI-Packages'
#                     ChannelchID = 'WEC5-MSI-Packages'
#                     ChannelSymbol = 'WEC5_MSI_Packages'
#                 },
#                 @{
#                     ChannelName = 'WEC5-Log-Deletion-Security'
#                     ChannelchID = 'WEC5-Log-Deletion-Security'
#                     ChannelSymbol = 'WEC5_Log_Deletion_Security'
#                 },
#                 @{
#                     ChannelName = 'WEC5-Log-Deletion-System'
#                     ChannelchID = 'WEC5-Log-Deletion-System'
#                     ChannelSymbol = 'WEC5_Log_Deletion_System'
#                 },
#                 @{
#                     ChannelName = 'WEC5-Autoruns'
#                     ChannelchID = 'WEC5-Autoruns'
#                     ChannelSymbol = 'WEC5_Autoruns'
#                 }
#             )
#         },
#         @{
#             EventProviderName = 'WEC6'
#             EventGuid = New-Guid
#             EventSymbol = 'WEC6_EVENTS'
#             EventResourceFileName = $ResourceFileName
#             ImportChannelID='C6'
#             Channels = @(
#                 @{
#                     ChannelName = 'WEC6-Software-Restriction-Policies'
#                     ChannelchID = 'WEC6-Software-Restriction-Policies'
#                     ChannelSymbol = 'WEC6_Software_Restriction_Policies'
#                 },
#                 @{
#                     ChannelName = 'WEC6-ADFS'
#                     ChannelchID = 'WEC6-ADFS'
#                     ChannelSymbol = 'WEC6_ADFS'
#                 },
#                 @{
#                     ChannelName = 'WEC6-Device-Guard'
#                     ChannelchID = 'WEC6-Device-Guard'
#                     ChannelSymbol = 'WEC6_Device_Guard'
#                 },
#                 @{
#                     ChannelName = 'WEC6-Duo-Security'
#                     ChannelchID = 'WEC6-Duo-Security'
#                     ChannelSymbol = 'WEC6_Duo_Security'
#                 },
#                 @{
#                     ChannelName = 'WEC6-Microsoft-Office'
#                     ChannelchID = 'WEC6-Microsoft-Office'
#                     ChannelSymbol = 'WEC6_Microsoft_Office'
#                 },
#                 @{
#                     ChannelName = 'WEC6-Exploit-Guard'
#                     ChannelchID = 'WEC6-Exploit-Guard'
#                     ChannelSymbol = 'WEC6_Exploit_Guard'
#                 },
#                 @{
#                     ChannelName = 'WEC6-Sysmon'
#                     ChannelchID = 'WEC6-Sysmon'
#                     ChannelSymbol = 'WEC6_Sysmon'
#                 }
#             )
#         },
#         @{
#             EventProviderName = 'WEC7'
#             EventGuid = New-Guid
#             EventSymbol = 'WEC7_EVENTS'
#             EventResourceFileName = $ResourceFileName
#             ImportChannelID='C7'
#             Channels = @(
#                 @{
#                     ChannelName = 'WEC7-Active-Directory'
#                     ChannelchID = 'WEC7-Active-Directory'
#                     ChannelSymbol = 'WEC7_Active_Directory'
#                 },
#                 @{
#                     ChannelName = 'WEC7-Terminal-Services'
#                     ChannelchID = 'WEC7-Terminal-Services'
#                     ChannelSymbol = 'WEC7_Terminal_Services'
#                 },
#                 @{
#                     ChannelName = 'WEC7-Privilege-Use'
#                     ChannelchID = 'WEC7-Privilege-Use'
#                     ChannelSymbol = 'WEC7_Privilege_Use'
#                 }
#             )
#         }
#     )
    
#     #Generate XML
#     $EventsArrayFinal = foreach ($Event in $EventsArray) {
#         $channels = foreach ($channel in $Event.Channels) {
#         @"
    
#                         <channel name="$($Channel.ChannelName)" chid="$($Channel.ChannelchID)" symbol="$($Channel.ChannelSymbol)" type="Operational" enabled="true"></channel>
#     "@
#         }
#         @"
    
#                 <provider name="$($Event.EventProviderName)" guid="{$($Event.EventGUID)}" symbol="$($Event.EventSymbol)" resourceFileName="$($Event.EventResourceFileName)" messageFileName="$($Event.EventResourceFileName)">
#                     <events>
#                         <event symbol="DUMMY_EVENT" value="100" version="0" template="DUMMY_TEMPLATE" message="$message"></event>
#                     </events>
#                     <channels>
#                         <importChannel name="System" chid="$($Event.ImportChannelID)"></importChannel>$channels
#                     </channels>
#                     <templates>
#                         <template tid="DUMMY_TEMPLATE">
#                             <data name="Prop_UnicodeString" inType="win:UnicodeString" outType="xs:string"></data>
#                             <data name="PropUInt32" inType="win:UInt32" outType="xs:unsignedInt"></data>
#                         </template>
#                     </templates>
#                 </provider>
#     "@
#     }
#     $Content=@"
#     <?xml version="1.0"?>
#     <instrumentationManifest xsi:schemaLocation="http://schemas.microsoft.com/win/2004/08/events eventman.xsd" xmlns="http://schemas.microsoft.com/win/2004/08/events" xmlns:win="http://manifests.microsoft.com/win/2004/08/windows/events" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:trace="http://schemas.microsoft.com/win/2004/08/events/trace">
#         <instrumentation>
#             <events>$EventsArrayFinal
#             </events>
#         </instrumentation>
#         <localization>
#             <resources culture="en-US">
#                 <stringTable>
#                     <string id="level.Informational" value="Information"></string>
#                     <string id="channel.System" value="System"></string>
#                     <string id="Publisher.EventMessage" value="Prop_UnicodeString=%1;%n&#xA;                  Prop_UInt32=%2;%n"></string>
#                     <string id="Custom Forwarded Events.event.100.message" value="Prop_UnicodeString=%1;%n&#xA;                  Prop_UInt32=%2;%n"></string>
#                 </stringTable>
#             </resources>
#         </localization>
#     </instrumentationManifest>
#     "@
    
#     #write XML
#     Set-Content -Value $content -Path (Join-Path -Path $OutputFolder -ChildPath $ManifestFileName) -Encoding ASCII
    
- name: Custom Event Channel - Compile the Custom Event Channel dll
  win_shell: |
    $OutputFolder="C:\WEC"
    
    #Create output folder if does not exist
    if(!([System.IO.File]::Exists(Test-Path $OutputFolder))) { 
        New-Item $OutputFolder -ItemType Directory -ErrorAction SilentlyContinue
    }

    $ManifestFile = "C:\Users\Administrator\Downloads\windows-event-forwarding-master\windows-event-channels\CustomEventChannels.man"
    
    #Create Man file or run setup
    #Variables
    $CustomEventChannelsFileName="CustomEventChannels"

    #Compile manifest https://docs.microsoft.com/en-us/windows/desktop/WES/compiling-an-instrumentation-manifest
    $CustomEventChannelsFileName="CustomEventChannels"
    $ToolsPath="C:\Program Files (x86)\Windows Kits\10\bin\10.0.17763.0\x64"
    $dotNetPath="C:\Windows\Microsoft.NET\Framework64\v4.0.30319"
    
    # User Palantir Manifest File
    Copy-Item "$ManifestFile" "$OutputFolder\$CustomEventChannelsFileName.man"

    Start-Process -Wait -FilePath "$ToolsPath\mc.exe" -ArgumentList "$OutputFolder\$CustomEventChannelsFileName.man" -WorkingDirectory $OutputFolder
    Start-Process -Wait -FilePath "$ToolsPath\mc.exe" -ArgumentList "-css CustomEventChannels.DummyEvent  $OutputFolder\$CustomEventChannelsFileName.man" -WorkingDirectory $OutputFolder
    Start-Process -Wait -FilePath "$ToolsPath\rc.exe" -ArgumentList "$OutputFolder\$CustomEventChannelsFileName.rc"
    Start-Process -Wait -FilePath "$dotNetPath\csc.exe" -ArgumentList "/win32res:$OutputFolder\$CustomEventChannelsFileName.res /unsafe /target:library /out:$OutputFolder\$CustomEventChannelsFileName.dll"
    
    #Some variables
    $CollectorServerName="Collector"
    $CustomEventChannelsFileName="CustomEventChannels"
    $CustomEventsFilesLocation="$OutputFolder"
    
    #configure Event Forwarding on collector server
    WECUtil qc /q
    
    #Create custom event forwarding logs
    Stop-Service Wecsvc
    #unload current event channnel (commented as there is no custom manifest)
    if([System.IO.File]::Exists($CustomEventChannelsFileName.man)) {
        wevtutil um C:\windows\system32\$CustomEventChannelsFileName.man
    }
    
    #copy new man and dll
    $files="$CustomEventChannelsFileName.dll","$CustomEventChannelsFileName.man"
    $Path="$CustomEventsFilesLocation"
    foreach ($file in $files){
        Copy-Item -Path "$path\$file" -Destination C:\Windows\system32
    }
    #load new event channel file and start Wecsvc service
    wevtutil im "C:\windows\system32\$CustomEventChannelsFileName.man"
    Start-Service Wecsvc

- name: Custom Event Channel - Remove Working Directory
  win_shell: |
    $OutputFolder="C:\WEC"
    Remove-Item -Path $OutputFolder -Force -Recurse
  
- name: Configure Windows Event Collector
  win_shell: |
    # Enable WEF quick config
    WECUtil qc /q

    # Import microsoft base (default to disabled)
    $XMLFiles=Get-ChildItem "c:\Subscriptions"

    # Process Templates, add AD group to each template and create subscription
    foreach ($XMLFile in $XMLFiles){
      # Subscribe all domain controllers and computers
      $AllowedSourceDomainComputers="O:NSG:NSD:(A;;GA;;;DC)(A;;GA;;;NS)(A;;GA;;;DD)"
      $Enabled="false"
      $LogFile="ForwardedEvents"
      [xml]$XML=get-content $XMLFile.FullName
      $xml=$XML
      $xml.subscription.Enabled=$Enabled
      $xml.subscription.AllowedSourceDomainComputers=$AllowedSourceDomainComputers
      # override eventlog - required if not using custom event channels
      $xml.subscription.LogFile=$LogFile
      $xml.Save("$env:TEMP\temp.xml")
      wecutil cs "$env:TEMP\temp.xml"
    }

    # Import panatir examples and default to enabled (disable custom log channels logging as well)
    $XMLFiles=Get-ChildItem "$env:USERPROFILE\Downloads\windows-event-forwarding-master\wef-subscriptions"

    # Process Templates, add AD group to each template and create subscription
    foreach ($XMLFile in $XMLFiles){
      # Subscribe all domain controllers and computers
      $AllowedSourceDomainComputers="O:NSG:NSD:(A;;GA;;;DC)(A;;GA;;;NS)(A;;GA;;;DD)"
      $Enabled="true"
      $LogFile="ForwardedEvents"
      [xml]$XML=get-content $XMLFile.FullName
      $xml=$XML
      $xml.subscription.Enabled=$Enabled
      $xml.subscription.AllowedSourceDomainComputers=$AllowedSourceDomainComputers
      # override eventlog - required if not using custom event channels
      # $xml.subscription.LogFile=$LogFile
      $xml.Save("$env:TEMP\temp.xml")
      wecutil cs "$env:TEMP\temp.xml"
    }

  register: script_result

- name: Script result
  debug: var=script_result
---
# Set static IP
- name: Configure static IP address
  win_shell: |
    Set-DnsClientGlobalSetting -SuffixSearchList @("{{ windows_domain_controller_info['dns_domain_name'] }}")
    function INT64-toIP() {   
      param ([int64]$int)   
      return (([math]::truncate($int/16777216)).tostring()+"."+([math]::truncate(($int%16777216)/65536)).tostring()+"."+([math]::truncate(($int%65536)/256)).tostring()+"."+([math]::truncate($int%256)).tostring() )  
    }

    $adapter = get-netadapter
    $interface = Get-NetIPAddress -AddressFamily IPv4 -InterfaceIndex $adapter.InterfaceIndex
    $gateway = get-netroute -DestinationPrefix '0.0.0.0/0' | select -ExpandProperty NextHop
    $mask = [Net.IPAddress]::Parse((INT64-toIP -int ([convert]::ToInt64(("1"*$interface.PrefixLength+"0"*(32-$interface.PrefixLength)),2))))

    $index = $adapter.InterfaceIndex
    $NetInterface = Get-WmiObject Win32_NetworkAdapterConfiguration | where {$_.InterfaceIndex -eq $index}
    $NetInterface.EnableStatic($interface.IPAddress, $mask)
    $NetInterface.SetGateways($gateway) 
  async: 30
  poll: 0

- name: Wait for the interface change to complete
  wait_for_connection:
    connect_timeout: 20
    sleep: 5
    delay: 120
    timeout: 300

- name: Setting DNS Servers
  win_dns_client:
    adapter_names: "*"
    ipv4_addresses: "{{ windows_domain_info['dns_servers'] }}"

- name: Reboot to complete computer name change
  win_reboot:
    pre_reboot_delay: 120
    reboot_timeout: 600
    post_reboot_delay: 120

- name: Add PSGallery as Trusted Powershell Repo
  win_shell: |
    if ($false -eq (get-packagesource | Where-Object { $_.Name -eq "PSGallery" } | % { $_.istrusted })){ 
      Set-PackageSource -Name PSGallery -Trusted -Force 
    }

# Add powershell modules
- name: Add xActiveDirectory
  win_shell: |
    Install-Module -Name xActiveDirectory

- name: Add xComputerManagement
  win_shell: |
    Install-Module -Name xComputerManagement

- name: Force Allow Powershell Unrestricted Execution (required for xWaitForADDomain on Windows 10)
  win_shell: |
    Set-Executionpolicy -ExecutionPolicy Unrestricted -Force -Scope LocalMachine
  when: ansible_os_name is search("Microsoft Windows 10")

- name: Fix start menu for "administrator" account on the domain
  win_shell: |
    New-ItemProperty -Path HKLM:Software\Microsoft\Windows\CurrentVersion\policies\system -Name FilterAdministratorToken -PropertyType DWord -Value 1 -Force 
  when: ansible_os_name is search("Microsoft Windows 10")
    
- name: Fix desktop background double print
  win_shell: |
    Remove-Item 'C:\Users\Default\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup\RunWallpaperSetupInit.cmd'
  ignore_errors: yes
  when: ansible_os_name is search("Microsoft Windows 10")
  
    

# wait for domain to be available
- name: Wait for forest xWaitForADDomain
  win_dsc:
    resource_name: xWaitForADDomain
    DomainName: "{{ windows_domain_controller_info['dns_domain_name'] }}"
    DomainUserCredential_username: "{{ windows_domain_controller_info['domain_admin_user'] }}"
    DomainUserCredential_password: "{{ windows_domain_controller_info['domain_admin_password'] }}"
    RetryCount: 100
    RetryIntervalSec: 5

- name: Join to the domain using xComputer
  win_dsc:
    resource_name: xComputer
    Name: "{{ inventory_hostname.split('.')[0] | lower }}"
    DomainName: "{{ windows_domain_controller_info['dns_domain_name'] }}"
    Credential_username: "{{ windows_domain_controller_info['domain_admin_user'] }}"
    Credential_password: "{{ windows_domain_controller_info['domain_admin_password'] }}"
    #JoinOu: "{{ join_domain_default_dn_base }}"
  register: join_domain


- name: Disable Powershell Unrestricted Execution (required for xWaitForADDomain on Windows 10)
  win_shell: |
    Set-Executionpolicy -ExecutionPolicy Undefined -Force -Scope LocalMachine
  when: ansible_os_name is search("Microsoft Windows 10")

- name: Reboot to complete domain membership
  win_reboot:
    pre_reboot_delay: 120
    reboot_timeout: 600
    post_reboot_delay: 120

- name: Update WinRM to Use Autoenroll Certificate
  win_shell: |
    # force gpupdate
    gpupdate /force
    
    # get thumbprint for the domain certificate
    $thumbprint = Get-ChildItem  -Path Cert:\LocalMachine\MY | Where-Object {$_.Issuer -Match "CN={{ windows_certificate_authority_info['CACommonName'] }}, DC={{ windows_domain_controller_info['dns_domain_name']| replace('.', ', DC=') }}"} | Select-Object Thumbprint

    # only replace if autoenroll certificate found
    if($thumbprint -ne $null){
      write-output "Found Domain Certificate - Updating WinRM"
      
      $listener = Get-ChildItem -Path WSMan:\localhost\Listener | Where-Object { $_.Keys -contains "Transport=HTTPS" } | select-object *
      
      # update existing listener
      if($listener -ne $null){
        $name = $listener.PSChildName
        set-item WSMan:\localhost\Listener\$name\Hostname -Value "" -Force
        set-item WSMan:\localhost\Listener\$name\CertificateThumbprint -Value $thumbprint.Thumbprint -force
      }else{
        New-Item -Path WSMan:\LocalHost\Listener -Address * -Transport HTTPS -CertificateThumbPrint $thumbprint.Thumbprint -Port "5986" -force
      }

      # remove any other certs
      Get-ChildItem  -Path Cert:\LocalMachine\MY | Where-Object {$_.Thumbprint -notmatch $thumbprint.Thumbprint } | Remove-Item

    }else{
        write-output "Domain Certificate Not Found - Skipping"
    }

- name: Reboot to complete domain membership
  win_reboot:
    pre_reboot_delay: 120
    reboot_timeout: 600
    post_reboot_delay: 120